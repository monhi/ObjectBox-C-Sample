#ifndef C_TEST_BUILDER_H
#define C_TEST_BUILDER_H

/* Generated by flatcc 0.5.2 FlatBuffers schema compiler for C by dvide.com */

#ifndef C_TEST_READER_H
#include "c_test_reader.h"
#endif
#ifndef FLATBUFFERS_COMMON_BUILDER_H
#include "flatbuffers_common_builder.h"
#endif
#include "flatcc/flatcc_prologue.h"
#ifndef flatbuffers_identifier
#define flatbuffers_identifier 0
#endif
#ifndef flatbuffers_extension
#define flatbuffers_extension ".bin"
#endif

static const flatbuffers_voffset_t __Foo_required[] = { 0 };
typedef flatbuffers_ref_t Foo_ref_t;
static Foo_ref_t Foo_clone(flatbuffers_builder_t *B, Foo_table_t t);
__flatbuffers_build_table(flatbuffers_, Foo, 2)

static const flatbuffers_voffset_t __Bar_required[] = { 0 };
typedef flatbuffers_ref_t Bar_ref_t;
static Bar_ref_t Bar_clone(flatbuffers_builder_t *B, Bar_table_t t);
__flatbuffers_build_table(flatbuffers_, Bar, 3)

#define __Foo_formal_args , uint64_t v0, flatbuffers_string_ref_t v1
#define __Foo_call_args , v0, v1
static inline Foo_ref_t Foo_create(flatbuffers_builder_t *B __Foo_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, Foo, Foo_identifier, Foo_type_identifier)

#define __Bar_formal_args , uint64_t v0, flatbuffers_string_ref_t v1, uint64_t v2
#define __Bar_call_args , v0, v1, v2
static inline Bar_ref_t Bar_create(flatbuffers_builder_t *B __Bar_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, Bar, Bar_identifier, Bar_type_identifier)

__flatbuffers_build_scalar_field(0, flatbuffers_, Foo_id, flatbuffers_uint64, uint64_t, 8, 8, UINT64_C(0), Foo)
__flatbuffers_build_string_field(1, flatbuffers_, Foo_text, Foo)

static inline Foo_ref_t Foo_create(flatbuffers_builder_t *B __Foo_formal_args)
{
    if (Foo_start(B)
        || Foo_id_add(B, v0)
        || Foo_text_add(B, v1)) {
        return 0;
    }
    return Foo_end(B);
}

static Foo_ref_t Foo_clone(flatbuffers_builder_t *B, Foo_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (Foo_start(B)
        || Foo_id_pick(B, t)
        || Foo_text_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, Foo_end(B));
}

__flatbuffers_build_scalar_field(0, flatbuffers_, Bar_id, flatbuffers_uint64, uint64_t, 8, 8, UINT64_C(0), Bar)
__flatbuffers_build_string_field(1, flatbuffers_, Bar_text, Bar)
__flatbuffers_build_scalar_field(2, flatbuffers_, Bar_fooId, flatbuffers_uint64, uint64_t, 8, 8, UINT64_C(0), Bar)

static inline Bar_ref_t Bar_create(flatbuffers_builder_t *B __Bar_formal_args)
{
    if (Bar_start(B)
        || Bar_id_add(B, v0)
        || Bar_fooId_add(B, v2)
        || Bar_text_add(B, v1)) {
        return 0;
    }
    return Bar_end(B);
}

static Bar_ref_t Bar_clone(flatbuffers_builder_t *B, Bar_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (Bar_start(B)
        || Bar_id_pick(B, t)
        || Bar_fooId_pick(B, t)
        || Bar_text_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, Bar_end(B));
}

#include "flatcc/flatcc_epilogue.h"
#endif /* C_TEST_BUILDER_H */
